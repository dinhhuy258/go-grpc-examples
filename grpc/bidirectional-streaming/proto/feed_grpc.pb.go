// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: feed.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedServiceClient is the client API for FeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedServiceClient interface {
	Feed(ctx context.Context, opts ...grpc.CallOption) (FeedService_FeedClient, error)
}

type feedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedServiceClient(cc grpc.ClientConnInterface) FeedServiceClient {
	return &feedServiceClient{cc}
}

func (c *feedServiceClient) Feed(ctx context.Context, opts ...grpc.CallOption) (FeedService_FeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &FeedService_ServiceDesc.Streams[0], "/feed.FeedService/Feed", opts...)
	if err != nil {
		return nil, err
	}
	x := &feedServiceFeedClient{stream}
	return x, nil
}

type FeedService_FeedClient interface {
	Send(*FeedRequest) error
	Recv() (*FeedResponse, error)
	grpc.ClientStream
}

type feedServiceFeedClient struct {
	grpc.ClientStream
}

func (x *feedServiceFeedClient) Send(m *FeedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *feedServiceFeedClient) Recv() (*FeedResponse, error) {
	m := new(FeedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FeedServiceServer is the server API for FeedService service.
// All implementations must embed UnimplementedFeedServiceServer
// for forward compatibility
type FeedServiceServer interface {
	Feed(FeedService_FeedServer) error
	mustEmbedUnimplementedFeedServiceServer()
}

// UnimplementedFeedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServiceServer struct {
}

func (UnimplementedFeedServiceServer) Feed(FeedService_FeedServer) error {
	return status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedFeedServiceServer) mustEmbedUnimplementedFeedServiceServer() {}

// UnsafeFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServiceServer will
// result in compilation errors.
type UnsafeFeedServiceServer interface {
	mustEmbedUnimplementedFeedServiceServer()
}

func RegisterFeedServiceServer(s grpc.ServiceRegistrar, srv FeedServiceServer) {
	s.RegisterService(&FeedService_ServiceDesc, srv)
}

func _FeedService_Feed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FeedServiceServer).Feed(&feedServiceFeedServer{stream})
}

type FeedService_FeedServer interface {
	Send(*FeedResponse) error
	Recv() (*FeedRequest, error)
	grpc.ServerStream
}

type feedServiceFeedServer struct {
	grpc.ServerStream
}

func (x *feedServiceFeedServer) Send(m *FeedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *feedServiceFeedServer) Recv() (*FeedRequest, error) {
	m := new(FeedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FeedService_ServiceDesc is the grpc.ServiceDesc for FeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.FeedService",
	HandlerType: (*FeedServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Feed",
			Handler:       _FeedService_Feed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "feed.proto",
}
