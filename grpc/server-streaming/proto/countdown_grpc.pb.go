// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: countdown.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CountdownServiceClient is the client API for CountdownService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountdownServiceClient interface {
	Countdown(ctx context.Context, in *CountdownRequest, opts ...grpc.CallOption) (CountdownService_CountdownClient, error)
}

type countdownServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCountdownServiceClient(cc grpc.ClientConnInterface) CountdownServiceClient {
	return &countdownServiceClient{cc}
}

func (c *countdownServiceClient) Countdown(ctx context.Context, in *CountdownRequest, opts ...grpc.CallOption) (CountdownService_CountdownClient, error) {
	stream, err := c.cc.NewStream(ctx, &CountdownService_ServiceDesc.Streams[0], "/countdown.CountdownService/Countdown", opts...)
	if err != nil {
		return nil, err
	}
	x := &countdownServiceCountdownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CountdownService_CountdownClient interface {
	Recv() (*CountdownResponse, error)
	grpc.ClientStream
}

type countdownServiceCountdownClient struct {
	grpc.ClientStream
}

func (x *countdownServiceCountdownClient) Recv() (*CountdownResponse, error) {
	m := new(CountdownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CountdownServiceServer is the server API for CountdownService service.
// All implementations must embed UnimplementedCountdownServiceServer
// for forward compatibility
type CountdownServiceServer interface {
	Countdown(*CountdownRequest, CountdownService_CountdownServer) error
	mustEmbedUnimplementedCountdownServiceServer()
}

// UnimplementedCountdownServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCountdownServiceServer struct {
}

func (UnimplementedCountdownServiceServer) Countdown(*CountdownRequest, CountdownService_CountdownServer) error {
	return status.Errorf(codes.Unimplemented, "method Countdown not implemented")
}
func (UnimplementedCountdownServiceServer) mustEmbedUnimplementedCountdownServiceServer() {}

// UnsafeCountdownServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountdownServiceServer will
// result in compilation errors.
type UnsafeCountdownServiceServer interface {
	mustEmbedUnimplementedCountdownServiceServer()
}

func RegisterCountdownServiceServer(s grpc.ServiceRegistrar, srv CountdownServiceServer) {
	s.RegisterService(&CountdownService_ServiceDesc, srv)
}

func _CountdownService_Countdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountdownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CountdownServiceServer).Countdown(m, &countdownServiceCountdownServer{stream})
}

type CountdownService_CountdownServer interface {
	Send(*CountdownResponse) error
	grpc.ServerStream
}

type countdownServiceCountdownServer struct {
	grpc.ServerStream
}

func (x *countdownServiceCountdownServer) Send(m *CountdownResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CountdownService_ServiceDesc is the grpc.ServiceDesc for CountdownService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CountdownService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "countdown.CountdownService",
	HandlerType: (*CountdownServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Countdown",
			Handler:       _CountdownService_Countdown_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "countdown.proto",
}
